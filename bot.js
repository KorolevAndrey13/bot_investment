require('dotenv').config();
const TOKEN = process.env.TELEGRAM_TOKEN;

const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(TOKEN);

const sessions = new Map();

bot.start((ctx) => {
  sessions.set(ctx.chat.id, {});
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å?', Markup.keyboard([
    ['üìà –°–∫–æ–ª—å–∫–æ —è –Ω–∞–∫–æ–ø–ª—é –∑–∞...'],
    ['‚è≥ –ó–∞ —Å–∫–æ–ª—å–∫–æ —è –Ω–∞–∫–æ–ø–ª—é...']
  ]).resize());
});

bot.hears('üìà –°–∫–æ–ª—å–∫–æ —è –Ω–∞–∫–æ–ø–ª—é –∑–∞...', (ctx) => {
  const session = sessions.get(ctx.chat.id) || {};
  session.mode = 'future_value';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö:');
  sessions.set(ctx.chat.id, session);
});

bot.hears('‚è≥ –ó–∞ —Å–∫–æ–ª—å–∫–æ —è –Ω–∞–∫–æ–ø–ª—é...', (ctx) => {
  const session = sessions.get(ctx.chat.id) || {};
  session.mode = 'time_needed';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:');
  sessions.set(ctx.chat.id, session);
});

bot.on('text', (ctx) => {
  const session = sessions.get(ctx.chat.id) || {};

  if (session.mode === 'future_value') {
    if (!session.months) {
      session.months = parseInt(ctx.message.text);
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
    } else if (!session.monthly) {
      session.monthly = parseFloat(ctx.message.text);
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 8):');
    } else if (!session.percent) {
      session.percent = parseFloat(ctx.message.text);
      const { months, monthly, percent } = session;
      const r = percent / 100 / 12;
      const fv = monthly * ((Math.pow(1 + r, months) - 1) / r);

      ctx.reply(`üí∞ –ß–µ—Ä–µ–∑ ${months} –º–µ—Å —Ç—ã –Ω–∞–∫–æ–ø–∏—à—å: ${fv.toFixed(2)} ‚ÇΩ`);
      sessions.delete(ctx.chat.id);
    }
  }

  else if (session.mode === 'time_needed') {
    if (!session.target) {
      session.target = parseFloat(ctx.message.text);
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
    } else if (!session.monthly) {
      session.monthly = parseFloat(ctx.message.text);
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    } else if (!session.percent) {
      session.percent = parseFloat(ctx.message.text);

      const { target, monthly, percent } = session;
      const r = percent / 100 / 12;
      let months = 0;
      let total = 0;

      while (total < target && months < 1000) {
        total = monthly * ((Math.pow(1 + r, months) - 1) / r);
        months++;
      }

      if (months >= 1000) {
        ctx.reply('‚ùå –¶–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.');
      } else {
        ctx.reply(`üïí –¢—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ ${months} –º–µ—Å`);
      }

      sessions.delete(ctx.chat.id);
    }
  }
});

bot.launch();
